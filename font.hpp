
#ifndef _FONT_HPP_
#define _FONT_HPP_

#include <stdint.h>

#ifndef FONT_HAVE_U32
typedef uint32_t U32;
#endif

#ifndef FONT_DEBUG_ASSERT
#define FONT_DEBUG_ASSERT(x) // TODO
#endif

struct font_t
{
    U32 id;
};

static const font_t font_none = { 0 };
static const font_t font_8x12 = { 1 };

enum
{
    font_flip_image_x = (1 << 0),
    font_flip_image_y = (1 << 1),
    font_flip_glyph_x = (1 << 2),
    font_flip_glyph_y = (1 << 3),
};

void get_metrics(font_t font, U32 * glyph_width, U32 * glyph_height);

//void draw_glyph_bgrx32(font_t font, U32 flags, I32 x, I32 y, I32 w, I32 h, U32 * pixels, U32 cp, U8 r, U8 g, U8 b);
//void draw_glyph_bgrx32(font_t font, U32 flags, I32 x, I32 y, I32 w, I32 h, U32 * pixels, U32 cp, U32 bgrx);
//void flip_glyph_bgrx32(font_t font, U32 flags, I32 x, I32 y, I32 w, I32 h, U32 * pixels, U32 cp);

#endif

#ifdef FONT_IMPLEMENTATION

#ifndef _FONT_CPP_
#define _FONT_CPP_

struct font_data_t
{
    U32 char_width; // must be 8 for now!
    U32 char_height;
    U32 num_uni; // unicode glyphs not in ascii

    U8 const * ascii_data;
    U32 const * uni_cp;
    U8 const * uni_data;
};

static const U8 _8x12_ascii_data[] =
{
    /*   0 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* NUL */
    /*   1 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* SOH */
    /*   2 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* STX */
    /*   3 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* ETX */
    /*   4 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* EOT */
    /*   5 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* ENQ */
    /*   6 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* ACK */
    /*   7 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* BEL */
    /*   8 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* BS */
    /*   9 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* TAB */
    /*  10 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* LF */
    /*  11 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* VT */
    /*  12 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* FF */
    /*  13 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* CR */
    /*  14 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* SO */
    /*  15 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* SI */
    /*  16 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* DLE */
    /*  17 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* DC1 */
    /*  18 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* DC2 */
    /*  19 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* DC3 */
    /*  20 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* DC4 */
    /*  21 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* NAK */
    /*  22 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* SYN */
    /*  23 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* ETB */
    /*  24 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* CAN */
    /*  25 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* EM */
    /*  26 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* SUB */
    /*  27 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* ESC */
    /*  28 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* FS */
    /*  29 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* GS */
    /*  30 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* RS */
    /*  31 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* US */
    /*  32 */  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, /* SPACE */
    /*  33 */ 12, 30, 30, 30, 12, 12,  0, 12, 12,  0,  0,  0, /* ! */
    /*  34 */ 54, 54, 20,  0,  0,  0,  0,  0,  0,  0,  0,  0, /* " */
    /*  35 */  0, 18, 18, 63, 18, 18, 63, 18, 18,  0,  0,  0, /* # */
    /*  36 */ 12, 30, 51,  3, 30, 48, 51, 30, 12, 12,  0,  0, /* $ */
    /*  37 */  0,  0, 35, 51, 24, 12,  6, 51, 49,  0,  0,  0, /* % */
    /*  38 */ 12, 30, 30, 12, 54, 27, 27, 27, 54,  0,  0,  0, /* & */
    /*  39 */ 12, 12,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0, /* ' */
    /*  40 */ 24, 12,  6,  6,  6,  6,  6, 12, 24,  0,  0,  0, /* ( */
    /*  41 */  6, 12, 24, 24, 24, 24, 24, 12,  6,  0,  0,  0, /* ) */
    /*  42 */  0,  0,  0, 51, 30, 63, 30, 51,  0,  0,  0,  0, /* * */
    /*  43 */  0,  0,  0, 12, 12, 63, 12, 12,  0,  0,  0,  0, /* + */
    /*  44 */  0,  0,  0,  0,  0,  0,  0, 12, 12,  6,  0,  0, /* , */
    /*  45 */  0,  0,  0,  0,  0, 63,  0,  0,  0,  0,  0,  0, /* - */
    /*  46 */  0,  0,  0,  0,  0,  0,  0, 12, 12,  0,  0,  0, /* . */
    /*  47 */  0,  0, 32, 48, 24, 12,  6,  3,  1,  0,  0,  0, /* / */
    /*  48 */ 12, 30, 51, 51, 51, 51, 51, 30, 12,  0,  0,  0, /* 0 */
    /*  49 */ 12, 14, 15, 12, 12, 12, 12, 12, 63,  0,  0,  0, /* 1 */
    /*  50 */ 30, 51, 48, 24, 12,  6,  3, 51, 63,  0,  0,  0, /* 2 */
    /*  51 */ 30, 51, 48, 48, 28, 48, 48, 51, 30,  0,  0,  0, /* 3 */
    /*  52 */ 16, 24, 28, 26, 25, 63, 24, 24, 60,  0,  0,  0, /* 4 */
    /*  53 */ 63,  3,  3, 31, 48, 48, 48, 51, 30,  0,  0,  0, /* 5 */
    /*  54 */ 28,  6,  3,  3, 31, 51, 51, 51, 30,  0,  0,  0, /* 6 */
    /*  55 */ 63, 49, 48, 48, 24, 12, 12, 12, 12,  0,  0,  0, /* 7 */
    /*  56 */ 30, 51, 51, 51, 30, 51, 51, 51, 30,  0,  0,  0, /* 8 */
    /*  57 */ 30, 51, 51, 51, 62, 48, 48, 24, 14,  0,  0,  0, /* 9 */
    /*  58 */  0,  0, 12, 12,  0,  0, 12, 12,  0,  0,  0,  0, /* : */
    /*  59 */  0,  0, 12, 12,  0,  0, 12, 12,  6,  0,  0,  0, /* ; */
    /*  60 */  0,  0, 24, 12,  6,  3,  6, 12, 24,  0,  0,  0, /* < */
    /*  61 */  0,  0,  0, 63,  0,  0, 63,  0,  0,  0,  0,  0, /* = */
    /*  62 */  0,  0,  3,  6, 12, 24, 12,  6,  3,  0,  0,  0, /* > */
    /*  63 */ 30, 51, 51, 24, 12, 12,  0, 12, 12,  0,  0,  0, /* ? */
    /*  64 */ 30, 51, 51, 59, 59, 59, 27,  3, 30,  0,  0,  0, /* @ */
    /*  65 */ 12, 30, 51, 51, 63, 51, 51, 51, 51,  0,  0,  0, /* A */
    /*  66 */ 31, 51, 51, 51, 31, 51, 51, 51, 31,  0,  0,  0, /* B */
    /*  67 */ 28, 54, 35,  3,  3,  3, 35, 54, 28,  0,  0,  0, /* C */
    /*  68 */ 15, 27, 51, 51, 51, 51, 51, 27, 15,  0,  0,  0, /* D */
    /*  69 */ 63, 51, 35, 11, 15, 11, 35, 51, 63,  0,  0,  0, /* E */
    /*  70 */ 63, 51, 35, 11, 15, 11,  3,  3,  3,  0,  0,  0, /* F */
    /*  71 */ 28, 54, 35,  3, 59, 51, 51, 54, 44,  0,  0,  0, /* G */
    /*  72 */ 51, 51, 51, 51, 63, 51, 51, 51, 51,  0,  0,  0, /* H */
    /*  73 */ 30, 12, 12, 12, 12, 12, 12, 12, 30,  0,  0,  0, /* I */
    /*  74 */ 60, 24, 24, 24, 24, 24, 27, 27, 14,  0,  0,  0, /* J */
    /*  75 */ 51, 51, 51, 27, 15, 27, 51, 51, 51,  0,  0,  0, /* K */
    /*  76 */  3,  3,  3,  3,  3,  3, 35, 51, 63,  0,  0,  0, /* L */
    /*  77 */ 33, 51, 63, 63, 51, 51, 51, 51, 51,  0,  0,  0, /* M */
    /*  78 */ 51, 51, 55, 55, 63, 59, 59, 51, 51,  0,  0,  0, /* N */
    /*  79 */ 30, 51, 51, 51, 51, 51, 51, 51, 30,  0,  0,  0, /* O */
    /*  80 */ 31, 51, 51, 51, 31,  3,  3,  3,  3,  0,  0,  0, /* P */
    /*  81 */ 30, 51, 51, 51, 51, 51, 63, 59, 30, 48,  0,  0, /* Q */
    /*  82 */ 31, 51, 51, 51, 31, 27, 51, 51, 51,  0,  0,  0, /* R */
    /*  83 */ 30, 51, 51,  6, 28, 48, 51, 51, 30,  0,  0,  0, /* S */
    /*  84 */ 63, 63, 45, 12, 12, 12, 12, 12, 30,  0,  0,  0, /* T */
    /*  85 */ 51, 51, 51, 51, 51, 51, 51, 51, 30,  0,  0,  0, /* U */
    /*  86 */ 51, 51, 51, 51, 51, 30, 30, 12, 12,  0,  0,  0, /* V */
    /*  87 */ 51, 51, 51, 51, 51, 63, 63, 63, 18,  0,  0,  0, /* W */
    /*  88 */ 51, 51, 30, 30, 12, 30, 30, 51, 51,  0,  0,  0, /* X */
    /*  89 */ 51, 51, 51, 51, 30, 12, 12, 12, 30,  0,  0,  0, /* Y */
    /*  90 */ 63, 51, 49, 24, 12,  6, 35, 51, 63,  0,  0,  0, /* Z */
    /*  91 */ 30,  6,  6,  6,  6,  6,  6,  6, 30,  0,  0,  0, /* [ */
    /*  92 */  0,  0,  1,  3,  6, 12, 24, 48, 32,  0,  0,  0, /* \ */
    /*  93 */ 30, 24, 24, 24, 24, 24, 24, 24, 30,  0,  0,  0, /* ] */
    /*  94 */  8, 28, 54,  0,  0,  0,  0,  0,  0,  0,  0,  0, /* ^ */
    /*  95 */  0,  0,  0,  0,  0,  0,  0,  0,  0, 63,  0,  0, /* _ */
    /*  96 */  6, 12, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0, /* ` */
    /*  97 */  0,  0,  0, 14, 24, 30, 27, 27, 54,  0,  0,  0, /* a */
    /*  98 */  3,  3,  3, 15, 27, 51, 51, 51, 30,  0,  0,  0, /* b */
    /*  99 */  0,  0,  0, 30, 51,  3,  3, 51, 30,  0,  0,  0, /* c */
    /* 100 */ 48, 48, 48, 60, 54, 51, 51, 51, 30,  0,  0,  0, /* d */
    /* 101 */  0,  0,  0, 30, 51, 63,  3, 51, 30,  0,  0,  0, /* e */
    /* 102 */ 28, 54, 38,  6, 15,  6,  6,  6, 15,  0,  0,  0, /* f */
    /* 103 */  0,  0,  0, 30, 51, 51, 51, 62, 48, 51, 30,  0, /* g */
    /* 104 */  3,  3,  3, 27, 55, 51, 51, 51, 51,  0,  0,  0, /* h */
    /* 105 */ 12, 12,  0, 14, 12, 12, 12, 12, 30,  0,  0,  0, /* i */
    /* 106 */ 48, 48,  0, 56, 48, 48, 48, 48, 48, 51, 30,  0, /* j */
    /* 107 */  3,  3,  3, 51, 27, 15, 15, 27, 51,  0,  0,  0, /* k */
    /* 108 */ 14, 12, 12, 12, 12, 12, 12, 12, 30,  0,  0,  0, /* l */
    /* 109 */  0,  0,  0, 29, 63, 43, 43, 43, 43,  0,  0,  0, /* m */
    /* 110 */  0,  0,  0, 29, 51, 51, 51, 51, 51,  0,  0,  0, /* n */
    /* 111 */  0,  0,  0, 30, 51, 51, 51, 51, 30,  0,  0,  0, /* o */
    /* 112 */  0,  0,  0, 30, 51, 51, 51, 31,  3,  3,  0,  0, /* p */
    /* 113 */  0,  0,  0, 30, 51, 51, 51, 62, 48, 48,  0,  0, /* q */
    /* 114 */  0,  0,  0, 29, 55, 51,  3,  3,  3,  0,  0,  0, /* r */
    /* 115 */  0,  0,  0, 30, 51,  6, 24, 51, 30,  0,  0,  0, /* s */
    /* 116 */  4,  6,  6, 15,  6,  6,  6, 54, 28,  0,  0,  0, /* t */
    /* 117 */  0,  0,  0, 27, 27, 27, 27, 27, 54,  0,  0,  0, /* u */
    /* 118 */  0,  0,  0, 51, 51, 51, 51, 30, 12,  0,  0,  0, /* v */
    /* 119 */  0,  0,  0, 51, 51, 51, 63, 63, 18,  0,  0,  0, /* w */
    /* 120 */  0,  0,  0, 51, 30, 12, 12, 30, 51,  0,  0,  0, /* x */
    /* 121 */  0,  0,  0, 51, 51, 51, 51, 62, 48, 24, 15,  0, /* y */
    /* 122 */  0,  0,  0, 63, 27, 12,  6, 51, 63,  0,  0,  0, /* z */
    /* 123 */ 56, 12, 12, 12,  7, 12, 12, 12, 56,  0,  0,  0, /* { */
    /* 124 */ 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  0,  0, /* | */
    /* 125 */  7, 12, 12, 12, 56, 12, 12, 12,  7,  0,  0,  0, /* } */
    /* 126 */ 38, 45, 25,  0,  0,  0,  0,  0,  0,  0,  0,  0, /* ~ */
    /* 127 */ 63, 63, 63, 63, 63, 63, 63, 63, 63,  0,  0,  0, /* DEL */
};

static const U32 _8x12_uni_cp[] =
{
    0x00a1,
    0x00b7,
    0x00c5,
    0x00df,
    0x00e4,
    0x00ef,
    0x00f6,
    0x00fc,
    0x23ce,
    0xff0d,
};

static const U8 _8x12_uni_data[] =
{
    /* 0x00a1 */  0,  0, 12, 12,  0,  12, 12, 30, 30, 30, 12,  0, /* ¡ */
    /* 0x00b7 */  0,  0,  0,  0,  0,  12, 12,  0,  0,  0,  0,  0, /* · */
    /* 0x00c5 */ 12, 18, 30, 51, 51,  63, 51, 51, 51, 51,  0,  0, /* Å */
    /* 0x00df */ 12, 30, 51, 51, 51,  99, 99, 51, 27,  3,  3,  0, /* ß */
    /* 0x00e4 */ 51, 51,  0, 14, 24,  30, 27, 27, 54,  0,  0,  0, /* ä */
    /* 0x00ef */ 51, 51,  0, 14, 12,  12, 12, 12, 30,  0,  0,  0, /* ï */
    /* 0x00f6 */ 51, 51,  0, 30, 51,  51, 51, 51, 30,  0,  0,  0, /* ö */
    /* 0x00fc */ 51, 51,  0, 27, 27,  27, 27, 27, 54,  0,  0,  0, /* ü */
    /* 0x23ce */  0, 32, 32, 32, 40,  44, 30, 12,  8,  0,  0,  0, /* ⏎ */
    /* 0xff0d */  0, 0 , 0 , 0 , 0 , 255, 0 , 0 , 0 , 0 ,  0,  0, /* － */
};

static const font_data_t g_fonts[] =
{
    { 0,  0, 0, 0, 0, 0, },
    { 8, 12, sizeof(_8x12_uni_cp) / sizeof(U32), _8x12_ascii_data, _8x12_uni_cp, _8x12_uni_data },
    // { 8,  8, sizeof(_8x8_uni_cp) / sizeof(U32), _8x8_ascii_data, _8x8_uni_cp, _8x8_uni_data, },
};

static void set_pixel_bgrx32_unsafe(I32 x, I32 y, I32 w, I32 h, U32 * pixels, U8 r, U8 g, U8 b)
{
    FONT_DEBUG_ASSERT(x >= 0);
    FONT_DEBUG_ASSERT(x < w);
    FONT_DEBUG_ASSERT(y >= 0);
    FONT_DEBUG_ASSERT(y < h);

    pixels[x + w * y] = r << 16 | g << 8 | b;
}

static void set_pixel_bgrx32(I32 x, I32 y, I32 w, I32 h, U32 * pixels, U8 r, U8 g, U8 b)
{
    if (x >= 0 && x < w && y >= 0 && y < h)
    {
        set_pixel_bgrx32_unsafe(x, y, w, h, pixels, r, g, b);
    }
}

static U8 const * find_glyph_bitmap(font_data_t const & font, U32 cp)
{
    if (cp < 128)
    {
        return font.ascii_data + cp * font.char_height;
    }
    else
    {
        U32 i;
        for (i = 0; i < font.num_uni; ++i) // TODO: binary search
        {
            if (font.uni_cp[i] == cp)
            {
                break;
            }
        }

        if (i == font.num_uni)
        {
            return font.ascii_data; // TODO: assumes unprintable glyph in first entry
        }
        else
        {
            return font.uni_data + i * font.char_height;
        }
    }
}

static void draw_glyph_bgrx32(font_data_t const & font, U32 flags, I32 x, I32 y, I32 w, I32 h, U32 * pixels, U32 cp, U8 r, U8 g, U8 b)
{
    U8 const * bitmap = find_glyph_bitmap(font, cp);

    I32 const xx = flags & font_flip_image_x ? w - 1 - x : x;
    I32 const yy = flags & font_flip_image_y ? h - 1 - y : y;

    for (I32 j = 0; j < (I32) font.char_height; ++j)
    {
        if (y + j >= h)
        {
            break;
        }

        I32 jj = flags & font_flip_glyph_y ? font.char_height - 1 - j : j;
        if (flags & font_flip_image_y) jj = -jj;

        U8 scanline = bitmap[j];
        for (I32 i = 0; i < (I32) font.char_width; ++i)
        {
            if (x + i >= w)
            {
                break;
            }

            I32 ii = flags & font_flip_glyph_x ? font.char_width - 1 - i : i;
            if (flags & font_flip_image_x) ii = -ii;

            if ((scanline >> i) & 1)
            {
                set_pixel_bgrx32(xx + ii, yy + jj, w, h, pixels, r, g, b);
            }
        }
    }
}

void get_metrics(font_t font, U32 * glyph_width, U32 * glyph_height)
{
    if (glyph_width)
    {
        *glyph_width  = g_fonts[font.id].char_width;
    }

    if (glyph_height)
    {
        *glyph_height = g_fonts[font.id].char_height;
    }
}

void draw_glyph_bgrx32(font_t font, U32 flags, I32 x, I32 y, I32 w, I32 h, U32 * pixels, U32 cp, U8 r, U8 g, U8 b)
{
    draw_glyph_bgrx32(g_fonts[font.id], flags, x, y, w, h, pixels, cp, r, g, b);
}

void draw_glyph_bgrx32(font_t font, U32 flags, I32 x, I32 y, I32 w, I32 h, U32 * pixels, U32 cp, U32 bgrx)
{
    draw_glyph_bgrx32(g_fonts[font.id], flags, x, y, w, h, pixels, cp, (U8) ((bgrx >> 16) & 0xff), (U8) ((bgrx >> 8) & 0xff), (U8) (bgrx & 0xff));
}

#endif

#endif
