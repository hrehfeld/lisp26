
(nil => nil)

(123 => 123)

("foo" => "foo")

((quote foo) => foo)

((if #t 1 2) => 1)
((if #f 1 2) => 2)

((eq 'a 'a) => t)
((eq 'a 'b) => nil)

((cons 1 2) => (1 . 2))

((car (cons 1 2)) => 1)
((cdr (cons 1 2)) => 2)

(((lambda (x) x) 1) => 1)
(((lambda (x) x) 2) => 2)

(((syntax (x) x) 1) => 1)

(((lambda (my/if) (my/if #t 1 2)) (syntax (a b c)
                                          (cons 'if (cons a (cons b (cons c nil))))))
 => 1)
(((lambda (my/if) (my/if #f 1 2)) (syntax (a b c)
                                          (cons 'if (cons a (cons b (cons c nil))))))
 => 2)


((block nil 1 2 3 4) => 4)
((block nil (return-from nil 42)) => 42)
((block nil 1 2 (return-from nil 111) 3 4) => 111)


((catch nil 1 2 3 4) => 4)
((catch nil (throw nil 42)) => 42)
((catch nil 1 2 (throw nil 111) 3 4) => 111)

;;; destructuring

(((lambda (x) x) 1) => 1)
(((lambda args args) 1 2 3) => (1 2 3))
(((lambda (x y z) `(,x ,y ,z)) 'a 'b 'c) => (a b c))

(((lambda (x . y) (cons x y)) 'a 'b 'c) => (a b c))

(((lambda ((a b) c) `(,a ,b ,c)) '(1 2) 3) => (1 2 3))

(((lambda () 'foo)) => foo)

;;; hash

(((lambda (hash list)
    ;;(println *env*)
    (hash-put hash 'bar 42)
    (hash-put hash 'bar 1337)
    (hash-put hash 'foo 1234)
    (list (hash-get hash 'foo)
          (hash-get hash 'bar)))
  (make-hash) (lambda args args))
 => (1234 1337))
